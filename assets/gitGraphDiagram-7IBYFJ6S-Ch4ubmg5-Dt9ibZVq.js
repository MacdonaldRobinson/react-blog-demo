import{m as U}from"./chunk-4BMEZGHF-CO_IuI5z-CzyoxMnB.js";import{e as X}from"./chunk-XZIHB7SX-D2eDNNRd-BBQ806Uj.js";import{p as $,w as Z,v as rr,c as tr,u as er,a as or,s as nr,i as w,l as cr,O as ar,r as sr,H as ir,B as dr,h as k,J as hr,K as mr,L as $r,Q as lr}from"./CMSPage-BX9ezz8L.js";import{u as yr}from"./radar-MK3ICKWK-DIRtu6OR-CdRT2Q2F.js";import"./index-lUyc09mm.js";import"./_baseUniq-BBpOEK6D-BVPV80T-.js";import"./_basePickBy-CTAde5C2-C-jXpQLg.js";import"./clone-Jx-iEPiG-aD7Hx_IP.js";var x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},gr=$r.gitGraph,O=$(()=>hr({...gr,...mr().gitGraph}),"getConfig"),i=new X(()=>{const t=O(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function D(){return lr({length:7})}$(D,"getID");function _(t,r){const e=Object.create(null);return t.reduce((c,a)=>{const s=r(a);return e[s]||(e[s]=!0,c.push(a)),c},[])}$(_,"uniqBy");var pr=$(function(t){i.records.direction=t},"setDirection"),fr=$(function(t){w.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{i.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),ur=$(function(){return i.records.options},"getOptions"),xr=$(function(t){let r=t.msg,e=t.id;const c=t.type;let a=t.tags;w.info("commit",r,e,c,a),w.debug("Entering commit:",r,e,c,a);const s=O();e=k.sanitizeText(e,s),r=k.sanitizeText(r,s),a=a==null?void 0:a.map(d=>k.sanitizeText(d,s));const h={id:e||i.records.seq+"-"+D(),message:r,seq:i.records.seq++,type:c??x.NORMAL,tags:a??[],parents:i.records.head==null?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=h,w.info("main branch",s.mainBranchName),i.records.commits.set(h.id,h),i.records.branches.set(i.records.currBranch,h.id),w.debug("in pushCommit "+h.id)},"commit"),br=$(function(t){let r=t.name;const e=t.order;if(r=k.sanitizeText(r,O()),i.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);i.records.branches.set(r,i.records.head!=null?i.records.head.id:null),i.records.branchConfig.set(r,{name:r,order:e}),F(r),w.debug("in createBranch")},"branch"),wr=$(t=>{let r=t.branch,e=t.id;const c=t.type,a=t.tags,s=O();r=k.sanitizeText(r,s),e&&(e=k.sanitizeText(e,s));const h=i.records.branches.get(i.records.currBranch),d=i.records.branches.get(r),l=h?i.records.commits.get(h):void 0,o=d?i.records.commits.get(d):void 0;if(l&&o&&l.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(i.records.currBranch===r){const m=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw m.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},m}if(l===void 0||!l){const m=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw m.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},m}if(!i.records.branches.has(r)){const m=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw m.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},m}if(o===void 0||!o){const m=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw m.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},m}if(l===o){const m=new Error('Incorrect usage of "merge". Both branches have same head');throw m.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},m}if(e&&i.records.commits.has(e)){const m=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw m.hash={text:`merge ${r} ${e} ${c} ${a==null?void 0:a.join(" ")}`,token:`merge ${r} ${e} ${c} ${a==null?void 0:a.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${c} ${a==null?void 0:a.join(" ")}`]},m}const n=d||"",u={id:e||`${i.records.seq}-${D()}`,message:`merged branch ${r} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,n],branch:i.records.currBranch,type:x.MERGE,customType:c,customId:!!e,tags:a??[]};i.records.head=u,i.records.commits.set(u.id,u),i.records.branches.set(i.records.currBranch,u.id),w.debug(i.records.branches),w.debug("in mergeBranch")},"merge"),Br=$(function(t){let r=t.id,e=t.targetId,c=t.tags,a=t.parent;w.debug("Entering cherryPick:",r,e,c);const s=O();if(r=k.sanitizeText(r,s),e=k.sanitizeText(e,s),c=c==null?void 0:c.map(l=>k.sanitizeText(l,s)),a=k.sanitizeText(a,s),!r||!i.records.commits.has(r)){const l=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw l.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},l}const h=i.records.commits.get(r);if(h===void 0||!h)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(a&&!(Array.isArray(h.parents)&&h.parents.includes(a)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const d=h.branch;if(h.type===x.MERGE&&!a)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!i.records.commits.has(e)){if(d===i.records.currBranch){const u=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw u.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},u}const l=i.records.branches.get(i.records.currBranch);if(l===void 0||!l){const u=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw u.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},u}const o=i.records.commits.get(l);if(o===void 0||!o){const u=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw u.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},u}const n={id:i.records.seq+"-"+D(),message:`cherry-picked ${h==null?void 0:h.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,h.id],branch:i.records.currBranch,type:x.CHERRY_PICK,tags:c?c.filter(Boolean):[`cherry-pick:${h.id}${h.type===x.MERGE?`|parent:${a}`:""}`]};i.records.head=n,i.records.commits.set(n.id,n),i.records.branches.set(i.records.currBranch,n.id),w.debug(i.records.branches),w.debug("in cherryPick")}},"cherryPick"),F=$(function(t){if(t=k.sanitizeText(t,O()),i.records.branches.has(t)){i.records.currBranch=t;const r=i.records.branches.get(i.records.currBranch);r===void 0||!r?i.records.head=null:i.records.head=i.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function N(t,r,e){const c=t.indexOf(r);c===-1?t.push(e):t.splice(c,1,e)}$(N,"upsert");function W(t){const r=t.reduce((a,s)=>a.seq>s.seq?a:s,t[0]);let e="";t.forEach(function(a){a===r?e+="	*":e+="	|"});const c=[e,r.id,r.seq];for(const a in i.records.branches)i.records.branches.get(a)===r.id&&c.push(a);if(w.debug(c.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const a=i.records.commits.get(r.parents[0]);N(t,r,a),r.parents[1]&&t.push(i.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const a=i.records.commits.get(r.parents[0]);N(t,r,a)}}t=_(t,a=>a.id),W(t)}$(W,"prettyPrintCommitHistory");var Er=$(function(){w.debug(i.records.commits);const t=Y()[0];W([t])},"prettyPrint"),vr=$(function(){i.reset(),dr()},"clear"),Cr=$(function(){return[...i.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),kr=$(function(){return i.records.branches},"getBranches"),Lr=$(function(){return i.records.commits},"getCommits"),Y=$(function(){const t=[...i.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,e)=>r.seq-e.seq),t},"getCommitsArray"),Tr=$(function(){return i.records.currBranch},"getCurrentBranch"),Mr=$(function(){return i.records.direction},"getDirection"),Pr=$(function(){return i.records.head},"getHead"),V={commitType:x,getConfig:O,setDirection:pr,setOptions:fr,getOptions:ur,commit:xr,branch:br,merge:wr,cherryPick:Br,checkout:F,prettyPrint:Er,clear:vr,getBranchesAsObjArray:Cr,getBranches:kr,getCommits:Lr,getCommitsArray:Y,getCurrentBranch:Tr,getDirection:Mr,getHead:Pr,setAccTitle:nr,getAccTitle:or,getAccDescription:er,setAccDescription:tr,setDiagramTitle:rr,getDiagramTitle:Z},Rr=$((t,r)=>{U(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)Ir(e,r)},"populate"),Ir=$((t,r)=>{const e={Commit:$(c=>r.commit(Ar(c)),"Commit"),Branch:$(c=>r.branch(Gr(c)),"Branch"),Merge:$(c=>r.merge(Or(c)),"Merge"),Checkout:$(c=>r.checkout(qr(c)),"Checkout"),CherryPicking:$(c=>r.cherryPick(Hr(c)),"CherryPicking")}[t.$type];e?e(t):w.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Ar=$(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?x[t.type]:x.NORMAL,tags:t.tags??void 0}),"parseCommit"),Gr=$(t=>({name:t.name,order:t.order??0}),"parseBranch"),Or=$(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?x[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),qr=$(t=>t.branch,"parseCheckout"),Hr=$(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),zr={parse:$(async t=>{const r=await yr("gitGraph",t);w.debug(r),Rr(r,V)},"parse")},j=cr(),E=j==null?void 0:j.gitGraph,I=10,A=40,L=4,M=2,G=8,v=new Map,C=new Map,z=30,q=new Map,S=[],R=0,f="LR",Sr=$(()=>{v.clear(),C.clear(),q.clear(),R=0,S=[],f="LR"},"clear"),J=$(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(e=>{const c=document.createElementNS("http://www.w3.org/2000/svg","tspan");c.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),c.setAttribute("dy","1em"),c.setAttribute("x","0"),c.setAttribute("class","row"),c.textContent=e.trim(),r.appendChild(c)}),r},"drawText"),Q=$(t=>{let r,e,c;return f==="BT"?(e=$((a,s)=>a<=s,"comparisonFunc"),c=1/0):(e=$((a,s)=>a>=s,"comparisonFunc"),c=0),t.forEach(a=>{var s,h;const d=f==="TB"||f=="BT"?(s=C.get(a))==null?void 0:s.y:(h=C.get(a))==null?void 0:h.x;d!==void 0&&e(d,c)&&(r=a,c=d)}),r},"findClosestParent"),Dr=$(t=>{let r="",e=1/0;return t.forEach(c=>{const a=C.get(c).y;a<=e&&(r=c,e=a)}),r||void 0},"findClosestParentBT"),Nr=$((t,r,e)=>{let c=e,a=e;const s=[];t.forEach(h=>{const d=r.get(h);if(!d)throw new Error(`Commit not found for key ${h}`);d.parents.length?(c=jr(d),a=Math.max(c,a)):s.push(d),Kr(d,c)}),c=a,s.forEach(h=>{_r(h,c,e)}),t.forEach(h=>{const d=r.get(h);if(d!=null&&d.parents.length){const l=Dr(d.parents);c=C.get(l).y-A,c<=a&&(a=c);const o=v.get(d.branch).pos,n=c-I;C.set(d.id,{x:o,y:n})}})},"setParallelBTPos"),Wr=$(t=>{var r;const e=Q(t.parents.filter(a=>a!==null));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const c=(r=C.get(e))==null?void 0:r.y;if(c===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return c},"findClosestParentPos"),jr=$(t=>Wr(t)+A,"calculateCommitPosition"),Kr=$((t,r)=>{const e=v.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const c=e.pos,a=r+I;return C.set(t.id,{x:c,y:a}),{x:c,y:a}},"setCommitPosition"),_r=$((t,r,e)=>{const c=v.get(t.branch);if(!c)throw new Error(`Branch not found for commit ${t.id}`);const a=r+e,s=c.pos;C.set(t.id,{x:s,y:a})},"setRootPosition"),Fr=$((t,r,e,c,a,s)=>{if(s===x.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${a%G} ${c}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${a%G} ${c}-inner`);else if(s===x.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${c}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${c}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${c}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${c}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${c}`);else{const h=t.append("circle");if(h.attr("cx",e.x),h.attr("cy",e.y),h.attr("r",r.type===x.MERGE?9:10),h.attr("class",`commit ${r.id} commit${a%G}`),s===x.MERGE){const d=t.append("circle");d.attr("cx",e.x),d.attr("cy",e.y),d.attr("r",6),d.attr("class",`commit ${c} ${r.id} commit${a%G}`)}s===x.REVERSE&&t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${c} ${r.id} commit${a%G}`)}},"drawCommitBullet"),Yr=$((t,r,e,c)=>{var a;if(r.type!==x.CHERRY_PICK&&(r.customId&&r.type===x.MERGE||r.type!==x.MERGE)&&E!=null&&E.showCommitLabel){const s=t.append("g"),h=s.insert("rect").attr("class","commit-label-bkg"),d=s.append("text").attr("x",c).attr("y",e.y+25).attr("class","commit-label").text(r.id),l=(a=d.node())==null?void 0:a.getBBox();if(l&&(h.attr("x",e.posWithOffset-l.width/2-M).attr("y",e.y+13.5).attr("width",l.width+2*M).attr("height",l.height+2*M),f==="TB"||f==="BT"?(h.attr("x",e.x-(l.width+4*L+5)).attr("y",e.y-12),d.attr("x",e.x-(l.width+4*L)).attr("y",e.y+l.height-12)):d.attr("x",e.posWithOffset-l.width/2),E.rotateCommitLabel))if(f==="TB"||f==="BT")d.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),h.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const o=-7.5-(l.width+10)/25*9.5,n=10+l.width/25*8.5;s.attr("transform","translate("+o+", "+n+") rotate(-45, "+c+", "+e.y+")")}}},"drawCommitLabel"),Vr=$((t,r,e,c)=>{var a;if(r.tags.length>0){let s=0,h=0,d=0;const l=[];for(const o of r.tags.reverse()){const n=t.insert("polygon"),u=t.append("circle"),m=t.append("text").attr("y",e.y-16-s).attr("class","tag-label").text(o),y=(a=m.node())==null?void 0:a.getBBox();if(!y)throw new Error("Tag bbox not found");h=Math.max(h,y.width),d=Math.max(d,y.height),m.attr("x",e.posWithOffset-y.width/2),l.push({tag:m,hole:u,rect:n,yOffset:s}),s+=20}for(const{tag:o,hole:n,rect:u,yOffset:m}of l){const y=d/2,p=e.y-19.2-m;if(u.attr("class","tag-label-bkg").attr("points",`
      ${c-h/2-L/2},${p+M}  
      ${c-h/2-L/2},${p-M}
      ${e.posWithOffset-h/2-L},${p-y-M}
      ${e.posWithOffset+h/2+L},${p-y-M}
      ${e.posWithOffset+h/2+L},${p+y+M}
      ${e.posWithOffset-h/2-L},${p+y+M}`),n.attr("cy",p).attr("cx",c-h/2+L/2).attr("r",1.5).attr("class","tag-hole"),f==="TB"||f==="BT"){const g=c+m;u.attr("class","tag-label-bkg").attr("points",`
        ${e.x},${g+2}
        ${e.x},${g-2}
        ${e.x+I},${g-y-2}
        ${e.x+I+h+4},${g-y-2}
        ${e.x+I+h+4},${g+y+2}
        ${e.x+I},${g+y+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+c+")"),n.attr("cx",e.x+L/2).attr("cy",g).attr("transform","translate(12,12) rotate(45, "+e.x+","+c+")"),o.attr("x",e.x+5).attr("y",g+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+c+")")}}}},"drawCommitTags"),Jr=$(t=>{switch(t.customType??t.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Qr=$((t,r,e,c)=>{const a={x:0,y:0};if(t.parents.length>0){const s=Q(t.parents);if(s){const h=c.get(s)??a;return r==="TB"?h.y+A:r==="BT"?(c.get(t.id)??a).y-A:h.x+A}}else return r==="TB"?z:r==="BT"?(c.get(t.id)??a).y-A:0;return 0},"calculatePosition"),Ur=$((t,r,e)=>{var c,a;const s=f==="BT"&&e?r:r+I,h=f==="TB"||f==="BT"?s:(c=v.get(t.branch))==null?void 0:c.pos,d=f==="TB"||f==="BT"?(a=v.get(t.branch))==null?void 0:a.pos:s;if(d===void 0||h===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:d,y:h,posWithOffset:s}},"getCommitPosition"),K=$((t,r,e)=>{if(!E)throw new Error("GitGraph config not found");const c=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let s=f==="TB"||f==="BT"?z:0;const h=[...r.keys()],d=(E==null?void 0:E.parallelCommits)??!1,l=$((n,u)=>{var m,y;const p=(m=r.get(n))==null?void 0:m.seq,g=(y=r.get(u))==null?void 0:y.seq;return p!==void 0&&g!==void 0?p-g:0},"sortKeys");let o=h.sort(l);f==="BT"&&(d&&Nr(o,r,s),o=o.reverse()),o.forEach(n=>{var u;const m=r.get(n);if(!m)throw new Error(`Commit not found for key ${n}`);d&&(s=Qr(m,f,s,C));const y=Ur(m,s,d);if(e){const p=Jr(m),g=m.customType??m.type,T=((u=v.get(m.branch))==null?void 0:u.index)??0;Fr(c,m,y,p,T,g),Yr(a,m,y,s),Vr(a,m,y,s)}f==="TB"||f==="BT"?C.set(m.id,{x:y.x,y:y.posWithOffset}):C.set(m.id,{x:y.posWithOffset,y:y.y}),s=f==="BT"&&d?s+A:s+A+I,s>R&&(R=s)})},"drawCommits"),Xr=$((t,r,e,c,a)=>{const s=(f==="TB"||f==="BT"?e.x<c.x:e.y<c.y)?r.branch:t.branch,h=$(l=>l.branch===s,"isOnBranchToGetCurve"),d=$(l=>l.seq>t.seq&&l.seq<r.seq,"isBetweenCommits");return[...a.values()].some(l=>d(l)&&h(l))},"shouldRerouteArrow"),H=$((t,r,e=0)=>{const c=t+Math.abs(t-r)/2;if(e>5)return c;if(S.every(s=>Math.abs(s-c)>=10))return S.push(c),c;const a=Math.abs(t-r);return H(t,r-a/5,e+1)},"findLane"),Zr=$((t,r,e,c)=>{var a,s,h,d,l;const o=C.get(r.id),n=C.get(e.id);if(o===void 0||n===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const u=Xr(r,e,o,n,c);let m="",y="",p=0,g=0,T=(a=v.get(e.branch))==null?void 0:a.index;e.type===x.MERGE&&r.id!==e.parents[0]&&(T=(s=v.get(r.branch))==null?void 0:s.index);let b;if(u){m="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",p=10,g=10;const P=o.y<n.y?H(o.y,n.y):H(n.y,o.y),B=o.x<n.x?H(o.x,n.x):H(n.x,o.x);f==="TB"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${y} ${B} ${o.y+g} L ${B} ${n.y-p} ${m} ${B+g} ${n.y} L ${n.x} ${n.y}`:(T=(h=v.get(r.branch))==null?void 0:h.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${m} ${B} ${o.y+g} L ${B} ${n.y-p} ${y} ${B-g} ${n.y} L ${n.x} ${n.y}`):f==="BT"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${m} ${B} ${o.y-g} L ${B} ${n.y+p} ${y} ${B+g} ${n.y} L ${n.x} ${n.y}`:(T=(d=v.get(r.branch))==null?void 0:d.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${y} ${B} ${o.y-g} L ${B} ${n.y+p} ${m} ${B-g} ${n.y} L ${n.x} ${n.y}`):o.y<n.y?b=`M ${o.x} ${o.y} L ${o.x} ${P-p} ${m} ${o.x+g} ${P} L ${n.x-p} ${P} ${y} ${n.x} ${P+g} L ${n.x} ${n.y}`:(T=(l=v.get(r.branch))==null?void 0:l.index,b=`M ${o.x} ${o.y} L ${o.x} ${P+p} ${y} ${o.x+g} ${P} L ${n.x-p} ${P} ${m} ${n.x} ${P-g} L ${n.x} ${n.y}`)}else m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,f==="TB"?(o.x<n.x&&(e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${m} ${o.x+g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${y} ${n.x} ${o.y+g} L ${n.x} ${n.y}`),o.x>n.x&&(m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${y} ${o.x-g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x+p} ${o.y} ${m} ${n.x} ${o.y+g} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):f==="BT"?(o.x<n.x&&(e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${y} ${o.x+g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${m} ${n.x} ${o.y-g} L ${n.x} ${n.y}`),o.x>n.x&&(m="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,g=20,e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${m} ${o.x-g} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${m} ${n.x} ${o.y-g} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):(o.y<n.y&&(e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${y} ${n.x} ${o.y+g} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${m} ${o.x+g} ${n.y} L ${n.x} ${n.y}`),o.y>n.y&&(e.type===x.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${m} ${n.x} ${o.y-g} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${y} ${o.x+g} ${n.y} L ${n.x} ${n.y}`),o.y===n.y&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`));if(b===void 0)throw new Error("Line definition not found");t.append("path").attr("d",b).attr("class","arrow arrow"+T%G)},"drawArrow"),rt=$((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(c=>{const a=r.get(c);a.parents&&a.parents.length>0&&a.parents.forEach(s=>{Zr(e,r.get(s),a,r)})})},"drawArrows"),tt=$((t,r)=>{const e=t.append("g");r.forEach((c,a)=>{var s;const h=a%G,d=(s=v.get(c.name))==null?void 0:s.pos;if(d===void 0)throw new Error(`Position not found for branch ${c.name}`);const l=e.append("line");l.attr("x1",0),l.attr("y1",d),l.attr("x2",R),l.attr("y2",d),l.attr("class","branch branch"+h),f==="TB"?(l.attr("y1",z),l.attr("x1",d),l.attr("y2",R),l.attr("x2",d)):f==="BT"&&(l.attr("y1",R),l.attr("x1",d),l.attr("y2",z),l.attr("x2",d)),S.push(d);const o=c.name,n=J(o),u=e.insert("rect"),m=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+h);m.node().appendChild(n);const y=n.getBBox();u.attr("class","branchLabelBkg label"+h).attr("rx",4).attr("ry",4).attr("x",-y.width-4-((E==null?void 0:E.rotateCommitLabel)===!0?30:0)).attr("y",-y.height/2+8).attr("width",y.width+18).attr("height",y.height+4),m.attr("transform","translate("+(-y.width-14-((E==null?void 0:E.rotateCommitLabel)===!0?30:0))+", "+(d-y.height/2-1)+")"),f==="TB"?(u.attr("x",d-y.width/2-10).attr("y",0),m.attr("transform","translate("+(d-y.width/2-5)+", 0)")):f==="BT"?(u.attr("x",d-y.width/2-10).attr("y",R),m.attr("transform","translate("+(d-y.width/2-5)+", "+R+")")):u.attr("transform","translate(-19, "+(d-y.height/2)+")")})},"drawBranches"),et=$(function(t,r,e,c,a){return v.set(t,{pos:r,index:e}),r+=50+(a?40:0)+(f==="TB"||f==="BT"?c.width/2:0),r},"setBranchPosition"),ot=$(function(t,r,e,c){if(Sr(),w.debug("in gitgraph renderer",t+`
`,"id:",r,e),!E)throw new Error("GitGraph config not found");const a=E.rotateCommitLabel??!1,s=c.db;q=s.getCommits();const h=s.getBranchesAsObjArray();f=s.getDirection();const d=ar(`[id="${r}"]`);let l=0;h.forEach((o,n)=>{var u;const m=J(o.name),y=d.append("g"),p=y.insert("g").attr("class","branchLabel"),g=p.insert("g").attr("class","label branch-label");(u=g.node())==null||u.appendChild(m);const T=m.getBBox();l=et(o.name,l,n,T,a),g.remove(),p.remove(),y.remove()}),K(d,q,!1),E.showBranches&&tt(d,h),rt(d,q),K(d,q,!0),sr.insertTitle(d,"gitTitleText",E.titleTopMargin??0,s.getDiagramTitle()),ir(void 0,d,E.diagramPadding,E.useMaxWidth)},"draw"),nt={draw:ot},ct=$(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),at=ct,gt={parser:zr,db:V,renderer:nt,styles:at};export{gt as diagram};
